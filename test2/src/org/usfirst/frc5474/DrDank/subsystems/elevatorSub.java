// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5474.DrDank.subsystems;

import org.usfirst.frc5474.DrDank.Robot;
import org.usfirst.frc5474.DrDank.RobotMap;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class elevatorSub extends Subsystem {
	public static int scalePos = 15500 + Robot.elevatorStartPos;
	public static int switchPos = 5000 + Robot.elevatorStartPos;
	public static int bottomPos = Robot.elevatorStartPos;
	
	
	
	public static String targetLocation = null;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private TalonSRX talonSRX1 = RobotMap.elevatorSubelevatorController;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	@Override
	public void initDefaultCommand() {
	}

	@Override
	public void periodic() {

	}
public void goToPos(int goToPos, String targetPos){
	if(Robot.elevatorCurrentPos > goToPos) {
		SmartDashboard.putString("Target Position", targetPos);
		talonSRX1.set(ControlMode.Position, -goToPos);
		SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
	}else {
		SmartDashboard.putString("Target Position", targetPos);
		talonSRX1.set(ControlMode.Position, goToPos);
		SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
	}
}
	public void controlMotor(XboxController joystick) {
		double y = joystick.getY();
		SmartDashboard.putNumber("Y Value: ", y);
		double controlMultiplier = y * 30.0 * 256; // 50 Rotations * 256 u/rev in either direction
		int maxRotations = 2;
		int minRotations = 0;

		talonSRX1.set(ControlMode.Position, controlMultiplier);  //50 rotations in either direction

				SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
		// }

	}

	public void goToScale() {
		goToPos(scalePos, "Scale");
		/*
		targetLocation = ("Scale");
		SmartDashboard.putString("Target Position", targetLocation);
		double y = 1;// sets positive or neg direction
		double controlMultiplier = y * 30 * 256; /* 256 u/rev in either direction */
		/*int maxRotations = 2;// these set boundary where the motor will stop rotating
		int minRotations = 2;

		talonSRX1.configForwardSoftLimitThreshold(+maxRotations * 4096, 0);
		talonSRX1.configReverseSoftLimitThreshold(minRotations * 4096, 0);

		talonSRX1.configForwardSoftLimitEnable(true, 0);
		talonSRX1.configReverseSoftLimitEnable(true, 0);
		talonSRX1.set(ControlMode.Position, controlMultiplier);
		SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
	*/
	}
	public void gotoSwitch() {
		goToPos(switchPos, "Switch");
		/*
		targetLocation = ("Switch");
		SmartDashboard.putString("Target Position", targetLocation);
		double y = 0;
		int maxRotations = 1;// these set boundary where the motor will stop rotating
		int minRotations = 1;
		// set the direction of the elevator based on its current position
		if (talonSRX1.getSelectedSensorPosition(0) > 5000) { // tests if needs to go up or down to get to the switch
			y = -1;
		} else if (talonSRX1.getSelectedSensorPosition(0) < 2500) {
			y = 1;
		}
		double controlMultiplier = y * 50 * 256; /* 256 u/rev in either direction 

		//talonSRX1.configForwardSoftLimitEnable(true, 0);
		//talonSRX1.configReverseSoftLimitEnable(true, 0);
		//talonSRX1.configForwardSoftLimitThreshold(+maxRotations * 4096, 0);
		//talonSRX1.configReverseSoftLimitThreshold(minRotations * 4096, 0);
		talonSRX1.set(ControlMode.Position, 6000);
		SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
	*/
	}

	public void lowerClaw() {
		goToPos(bottomPos, "Bottom");
		/*
		targetLocation = ("Bottom");
		SmartDashboard.putString("Target Position", targetLocation);
		double y = -1; // makes the elevator rotate down
		double controlMultiplier = y * 30.0 * 256; /* 50 Rotations * 256 u/rev in either direction 
		int maxRotations = 1; // these set boundary where the motor will stop rotating
		int minRotations = 1;

		talonSRX1.configForwardSoftLimitThreshold(+maxRotations * 4096, 0);
		talonSRX1.configReverseSoftLimitThreshold(minRotations * 4096, 0);

		talonSRX1.configForwardSoftLimitEnable(true, 0);
		talonSRX1.configReverseSoftLimitEnable(true, 0);

		talonSRX1.set(ControlMode.Position, controlMultiplier); /* 50 rotations in either direction 

		SmartDashboard.putNumber("Current Position",
				RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0));
		// }
*/
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}
