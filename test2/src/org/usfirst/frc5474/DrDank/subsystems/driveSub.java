// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5474.DrDank.subsystems;

import org.usfirst.frc5474.DrDank.RobotMap;
import org.usfirst.frc5474.DrDank.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.XboxController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveSub extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//private final SpeedController left = RobotMap.driveSubleft;
	//private final SpeedController right = RobotMap.driveSubright;
	private final DifferentialDrive robotDrive21 = RobotMap.driveSubRobotDrive21;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// setDefaultCommand(new arcadeDrive());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		
		setDefaultCommand(new arcadeDrive());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void drive(XboxController stick) {
		double updown = stick.getRawAxis(1) / 1.1;
		double leftright = stick.getX() / 1.2;
		double deadzone = 0.1;

		if (java.lang.Math.abs(updown) >= deadzone && java.lang.Math.abs(leftright) <= deadzone) {
			robotDrive21.tankDrive(-updown, -updown * 0.97, true);
		}

		if (java.lang.Math.abs(updown) >= deadzone && java.lang.Math.abs(leftright) >= deadzone) {
			robotDrive21.arcadeDrive(-updown, leftright, true);
		}
		if (java.lang.Math.abs(updown) <= deadzone && java.lang.Math.abs(leftright) >= deadzone) {
			robotDrive21.arcadeDrive(-updown, leftright, true);
		}
	}

	public void driveDrDankStraight(double power) {
		// used for autonomous mode	
		robotDrive21.arcadeDrive(power,0);
	}
	public void driveDrDankLeft(double power) {
		// used for autonomous mode
		robotDrive21.arcadeDrive(0, -power);
			}
	
	public void driveDrDankRight(double power) {
		// used for autonomous mode
		robotDrive21.arcadeDrive(0, power);
			}
	
	public void stopDrDank() {
		// used for autonomous mode
		robotDrive21.arcadeDrive(0,0);
			}
}
