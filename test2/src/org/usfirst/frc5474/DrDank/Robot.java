// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5474.DrDank;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5474.DrDank.commands.*;
import org.usfirst.frc5474.DrDank.subsystems.*;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {
	// Talon constants
	public static final int kSlotIdx = 0;
	public static final int kPIDLoopIdx = 0;
	public static final int kTimeoutMs = 10;
	public static TalonSRX talonSRX1;

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static driveSub driveSub;
	public static elevatorSub elevatorSub;
	public static climbSub climbSub;
	public static clawSub clawSub;
	int period;
	public static int elevatorCurrentPos;
	public static int elevatorStartPos;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSub = new driveSub();
		elevatorSub = new elevatorSub();
		climbSub = new climbSub();
		clawSub = new clawSub();
		elevatorCurrentPos = 0;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		talonSRX1 = RobotMap.elevatorSubelevatorController;
		talonSRX1.setNeutralMode(NeutralMode.Coast);

		talonSRX1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);

		talonSRX1.setSensorPhase(true);

		/* set the peak and nominal outputs, 12V means full */

		talonSRX1.configNominalOutputForward(0, kTimeoutMs);

		talonSRX1.configNominalOutputReverse(0, kTimeoutMs);

		talonSRX1.configPeakOutputForward(1, kTimeoutMs);

		talonSRX1.configPeakOutputReverse(-1, kTimeoutMs);

		/*
		 * set the allowable closed-loop error,
		 * 
		 * Closed-Loop output will be neutral within this range.
		 * 
		 * See Table in Section 17.2.1 for native units per rotation.
		 * 
		 */

		talonSRX1.configAllowableClosedloopError(0, kPIDLoopIdx, kTimeoutMs); /* always servo */

		/* set closed loop gains in slot0 */

		talonSRX1.config_kF(kPIDLoopIdx, 0.0, kTimeoutMs);

		talonSRX1.config_kP(kPIDLoopIdx, 0.4, kTimeoutMs);

		talonSRX1.config_kI(kPIDLoopIdx, 0.0, kTimeoutMs);

		talonSRX1.config_kD(kPIDLoopIdx, 0.0, kTimeoutMs);

		elevatorStartPos = RobotMap.elevatorSubelevatorController.getSelectedSensorPosition(0);
		talonSRX1.configForwardSoftLimitEnable(false, 0);
		talonSRX1.configReverseSoftLimitEnable(false, 0);
		// Add commands to Autonomous Sendable Chooser
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		chooser.addDefault("Autonomous Command", new AutonomousCommandCenter());
		
		// chooser.addDefault("Autonomous Command", new AutonomousCommandLeft());
		// chooser.addDefault("Autonomous Command", new AutonomousCommandRight());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		// SmartDashboard.putData("Auto mode", chooser);
	}

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void autonomousInit() {
		autonomousCommand = chooser.getSelected();
		period = 1;
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		period = period + 1;
		SmartDashboard.putNumber("period", period);
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}
}
