// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5474.DrDank;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static SpeedController driveSubleft;
	public static SpeedController driveSubright;
	public static DifferentialDrive driveSubRobotDrive21;
	public static TalonSRX elevatorSubelevatorController;
	public static SpeedController climbSubclimbController;
	public static SpeedController levitateController;
	public static SpeedController clawSubclawLeft;
	public static SpeedController clawSubclawRight;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSubleft = new Spark(8);
		// LiveWindow.addActuator("driveSub", "left", (Spark) driveSubleft);
		driveSubleft.setInverted(false);
		driveSubright = new Spark(9);
		// LiveWindow.addActuator("driveSub", "right", (Spark) driveSubright);
		driveSubright.setInverted(false);
		driveSubRobotDrive21 = new DifferentialDrive(driveSubleft, driveSubright);
		levitateController = new Spark(5); //Charlie, Matt, and Julie verified this is correct addr
		driveSubRobotDrive21.setSafetyEnabled(true);
		driveSubRobotDrive21.setExpiration(0.1);
		// driveSubRobotDrive21.setSensitivity(0.5);
		driveSubRobotDrive21.setMaxOutput(1.0);

		elevatorSubelevatorController = new TalonSRX(0); //Nate, Bertram, and Julie verified this is the correct addr

		climbSubclimbController = new Spark(7); //Charlie, Matt, and Julie verified this is correct addr
		climbSubclimbController.setInverted(false);
		SmartDashboard.putData("climbSub", (Spark) climbSubclimbController);
		clawSubclawLeft = new Spark(6); //Jarred and Julie verified this is correct addr
		SmartDashboard.putData("clawSub", (Spark) clawSubclawLeft);
		clawSubclawLeft.setInverted(false);
		clawSubclawRight = new Spark(4); //Should be correct but needs to be verified
		SmartDashboard.putData("clawSub", (Spark) clawSubclawRight);
		clawSubclawRight.setInverted(false);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
